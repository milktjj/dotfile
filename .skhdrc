#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"

# shift + alt - return : open -na /Applications/iTerm.app
# alt - return : open /Applications/iTerm.app

# shift + alt - return : open -na /applications/kitty.app
# alt - return : open /applications/kitty.app

shift + alt - return : open /applications/warp.app
alt - return : open /Applications/Emacs.app
alt - q : open  /applications/visual\ studio\ code.app/
alt - w : open  /Applications/Microsoft\ Edge.app
alt - e : open  /Applications/GoLand.app

alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east
alt - k : yabai -m window --focus north
alt - j : yabai -m window --focus south

cmd - k    : yabai -m space --mirror x-axis
cmd - j  : yabai -m space --mirror x-axis
cmd - h  : yabai -m space --mirror y-axis
cmd - l : yabai -m space --mirror y-axis

alt - 1	    : yabai -m space --focus 1
alt - 2	    : yabai -m space --focus 2
alt - 3	    : yabai -m space --focus 3
alt - 4	    : yabai -m space --focus 4
alt - 5	    : yabai -m space --focus 5
alt - 6	    : yabai -m space --focus 6
alt - 7	    : yabai -m space --focus 7
alt - 8	    : yabai -m space --focus 8
alt - 9	    : yabai -m space --focus 9
alt - 0	    : yabai -m space --focus 10


# make floating window fill screen
shift + alt - k     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
shift + alt - h : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen
shift + alt - l  : yabai -m window --grid 1:2:1:0:1:1

# rotate tree(逆时针旋转空间多个窗口)
alt - r : yabai -m space --rotate 90

# toggle window fullscreen zoom(单个窗口进入或退出全屏)
alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window native fullscreen(单个窗口进入或退出真全屏-上方的icon都会消失)
shift + alt - f : yabai -m window --toggle native-fullscreen

# toggle window split type(切换分割方式)
alt - e : yabai -m window --toggle split

# change layout of desktop(更换layout方式)
# ctrl + alt - a : yabai -m space --layout bsp
# ctrl + alt - d : yabai -m space --layout float

# float / unfloat window and center on screen(控制窗口是否进入float模式,进入的话就不会自动被排列)
# alt - c : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# send window to monitor and follow focus(将当前活跃窗口发送到指定显示器)
shift + ctrl - 1  : yabai -m window --display 1; yabai -m display --focus 1
shift + ctrl - 2  : yabai -m window --display 2; yabai -m display --focus 2

# focus monitor(切换显示器焦点)
ctrl - 1  : yabai -m display --focus 1
ctrl - 2  : yabai -m display --focus 2

# send window to desktop and follow focus(将当前活跃窗口发送到指定空间)
shift + alt - 1 : yabai -m window --space  1; #yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space  2; #yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space  3; #yabai -m space --focus 3
shift + alt - 4 : yabai -m window --space  4; #yabai -m space --focus 4
shift + alt - 5 : yabai -m window --space  5; #yabai -m space --focus 5
shift + alt - 6 : yabai -m window --space  6; #yabai -m space --focus 6
shift + alt - 7 : yabai -m window --space  7; #yabai -m space --focus 7
shift + alt - 8 : yabai -m window --space  8; #yabai -m space --focus 8
shift + alt - 9 : yabai -m window --space  9; #yabai -m space --focus 9


# toggle sticky (show on all spaces)
alt - s : yabai -m window --toggle sticky


# toggle sticky(+float), topmost, border and picture-in-picture
alt - p : yabai -m window --toggle sticky;\
          yabai -m window --toggle topmost;\
          yabai -m window --toggle border;\
          yabai -m window --toggle pip

# set insertion point in focused container
ctrl + alt - h : yabai -m window --insert west
ctrl + alt - j : yabai -m window --insert south
ctrl + alt - k : yabai -m window --insert north
ctrl + alt - l : yabai -m window --insert east

# swap window(同一个空间调整窗口位置)
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# move window
# shift + cmd - h : yabai -m window --warp west
# shift + cmd - j : yabai -m window --warp south
# shift + cmd - k : yabai -m window --warp north
# shift + cmd - l : yabai -m window --warp east
