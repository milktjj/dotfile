function _G.__coc_lightbulb_check_virt_text_eol(bufnr, lnum, exclude_ns)
	for _, ns_id in pairs(vim.api.nvim_get_namespaces()) do
		if ns_id ~= exclude_ns then
			local marks = vim.api.nvim_buf_get_extmarks(bufnr, ns_id, { lnum, 0 }, { lnum, -1 }, { details = true })
			if #marks > 0 then
				for _, mark in ipairs(marks) do
					local details = mark[4]
					if details.virt_text and details.virt_text_pos == "eol" then
						return true
					end
				end
			end
		end
	end
	return false
end

function _G.___coc_lightbulb_check_virt_text_eol(bufnr, lnum)
	local start = vim.loop.hrtime()
	local ret = __coc_lightbulb_check_virt_text_eol(bufnr, lnum)
	print((vim.loop.hrtime() - start) / 1e9)
	return ret
end

local ffi = require("ffi")
local api = vim.api

ffi.cdef("int curwin_col_off(void);")
---@diagnostic disable-next-line: undefined-field
local curwin_col_off = ffi.C.curwin_col_off

function _G.__coc_lightbulb_is_eol_suitable()
	local finish = vim.fn.col("$")
	local curCol = vim.fn.col(".")

	if finish - curCol > 30 or finish - 1 + curwin_col_off() + 0 > api.nvim_win_get_width(0) then
		return false
	end

	local lnum = vim.fn.line(".") - 1

	for _, ns in pairs(api.nvim_get_namespaces()) do
		if ns ~= a then
			local marks = api.nvim_buf_get_extmarks(0, ns, { lnum, 0 }, { lnum, -1 }, { details = true })
			if #marks > 0 then
				for _, mark in ipairs(marks) do
					local details = mark[4]
					if details.virt_text and details.virt_text_pos == "eol" then
						return false
					end
				end
			end
		end
	end
	return true
end
