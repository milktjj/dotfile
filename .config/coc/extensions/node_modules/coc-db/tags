!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/20c2fb8c/
0	package.json	/^          "default": ["\\"", ".", "`", "["]$/;"	s	array:contributes.configuration.properties.coc.source.db.triggerCharacters.default
0	package.json	/^          "default": ["sql", "mysql", "plsql"],$/;"	s	array:contributes.configuration.properties.coc.source.db.filetypes.default
0	package.json	/^          "type": ["array"],$/;"	s	array:contributes.configuration.properties.coc.source.db.filetypes.type
0	package.json	/^    "*"$/;"	s	array:activationEvents
0	package.json	/^    "coc.nvim",$/;"	s	array:keywords
1	package.json	/^          "default": ["\\"", ".", "`", "["]$/;"	s	array:contributes.configuration.properties.coc.source.db.triggerCharacters.default
1	package.json	/^          "default": ["sql", "mysql", "plsql"],$/;"	s	array:contributes.configuration.properties.coc.source.db.filetypes.default
1	package.json	/^    "db"$/;"	s	array:keywords
2	package.json	/^          "default": ["\\"", ".", "`", "["]$/;"	s	array:contributes.configuration.properties.coc.source.db.triggerCharacters.default
2	package.json	/^          "default": ["sql", "mysql", "plsql"],$/;"	s	array:contributes.configuration.properties.coc.source.db.filetypes.default
3	package.json	/^          "default": ["\\"", ".", "`", "["]$/;"	s	array:contributes.configuration.properties.coc.source.db.triggerCharacters.default
Features	README.md	/^## Features$/;"	s	chapter:vim-dadbod-completion
How it works	README.md	/^## How it works$/;"	s	chapter:vim-dadbod-completion
Install	README.md	/^## Install$/;"	s	chapter:vim-dadbod-completion
M.getCompletionItems	lua/vim_dadbod_completion.lua	/^function M.getCompletionItems(prefix, score_func)$/;"	f
Settings	README.md	/^## Settings$/;"	s	chapter:vim-dadbod-completion
Source	rplugin/python3/deoplete/source/vim_dadbod_completion.py	/^class Source(Base):$/;"	c
Todo	README.md	/^## Todo$/;"	s	chapter:vim-dadbod-completion
__init__	rplugin/python3/deoplete/source/vim_dadbod_completion.py	/^    def __init__(self, vim):$/;"	m	class:Source
activationEvents	package.json	/^  "activationEvents": [$/;"	a
author	package.json	/^  "author": "husakkristijan@gmail.com",$/;"	s
bugs	package.json	/^  "bugs": {$/;"	o
coc	package.json	/^    "coc": ">=0.0.57"$/;"	s	object:engines
coc.nvim	package.json	/^    "coc.nvim": ">=0.0.57"$/;"	s	object:devDependencies
coc.source.db.enable	package.json	/^        "coc.source.db.enable": {$/;"	o	object:contributes.configuration.properties
coc.source.db.filetypes	package.json	/^        "coc.source.db.filetypes": {$/;"	o	object:contributes.configuration.properties
coc.source.db.priority	package.json	/^        "coc.source.db.priority": {$/;"	o	object:contributes.configuration.properties
coc.source.db.shortcut	package.json	/^        "coc.source.db.shortcut": {$/;"	o	object:contributes.configuration.properties
coc.source.db.triggerCharacters	package.json	/^        "coc.source.db.triggerCharacters": {$/;"	o	object:contributes.configuration.properties
configuration	package.json	/^    "configuration": {$/;"	o	object:contributes
contributes	package.json	/^  "contributes": {$/;"	o
currentDoc	src/index.js	/^  const currentDoc = await workspace.document;$/;"	C
dbui_key_name	src/index.js	/^  const dbui_key_name = await nvim.call('getbufvar', [currentDoc.bufnr, 'dbui_db_key_name']);$/;"	C
default	package.json	/^          "default": "DB"$/;"	s	object:contributes.configuration.properties.coc.source.db.shortcut
default	package.json	/^          "default": 95$/;"	n	object:contributes.configuration.properties.coc.source.db.priority
default	package.json	/^          "default": ["\\"", ".", "`", "["]$/;"	a	object:contributes.configuration.properties.coc.source.db.triggerCharacters
default	package.json	/^          "default": ["sql", "mysql", "plsql"],$/;"	a	object:contributes.configuration.properties.coc.source.db.filetypes
default	package.json	/^          "default": true$/;"	b	object:contributes.configuration.properties.coc.source.db.enable
description	package.json	/^  "description": "db source for coc.nvim",$/;"	s
devDependencies	package.json	/^  "devDependencies": {$/;"	o
doComplete	src/index.js	/^    doComplete: async function (opt) {$/;"	m	class:source
engines	package.json	/^  "engines": {$/;"	o
g:db_adapter_postgres	autoload/vim_dadbod_completion.vim	/^    let g:db_adapter_postgres = 'db#adapter#postgresql#'$/;"	v
g:db_adapter_sqlite3	autoload/vim_dadbod_completion.vim	/^    let g:db_adapter_sqlite3 = 'db#adapter#sqlite#'$/;"	v
g:vim_dadbod_completion_loaded	plugin/vim_dadbod_completion.vim	/^let g:vim_dadbod_completion_loaded = 1$/;"	v
g:vim_dadbod_completion_refresh_deoplete	autoload/vim_dadbod_completion.vim	/^    let g:vim_dadbod_completion_refresh_deoplete = 0$/;"	v
g:vim_dadbod_completion_refresh_deoplete	autoload/vim_dadbod_completion.vim	/^  let g:vim_dadbod_completion_refresh_deoplete = 1$/;"	v
gather_candidates	rplugin/python3/deoplete/source/vim_dadbod_completion.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
get_complete_position	rplugin/python3/deoplete/source/vim_dadbod_completion.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
homepage	package.json	/^  "homepage": "https:\/\/github.com\/kristijanhusak\/vim-dadbod-completion#readme",$/;"	s
items	lua/vim_dadbod_completion.lua	/^  local items = vim.api.nvim_call_function('vim_dadbod_completion#omni',{0, prefix})$/;"	f
items	package.json	/^          "items": {$/;"	o	object:contributes.configuration.properties.coc.source.db.filetypes
keywords	package.json	/^  "keywords": [$/;"	a
license	package.json	/^  "license": "MIT",$/;"	s
main	package.json	/^  "main": "src\/index.js",$/;"	s
name	package.json	/^  "name": "coc-db",$/;"	s
name	src/index.js	/^    name: 'db',$/;"	p	class:source
path	src/index.js	/^const path = require('path');$/;"	C
properties	package.json	/^      "properties": {$/;"	o	object:contributes.configuration
repository	package.json	/^  "repository": {$/;"	o
rtpPath	src/index.js	/^const rtpPath = path.resolve(__dirname, '..\/');$/;"	C
s:alias_rgx	autoload/vim_dadbod_completion/alias_parser.vim	/^let s:alias_rgx = printf($/;"	v
s:base_column_query	autoload/vim_dadbod_completion/schemas.vim	/^let s:base_column_query = 'select table_name,column_name from information_schema.columns'$/;"	v
s:buffers	autoload/vim_dadbod_completion.vim	/^let s:buffers = {}$/;"	v
s:cache	autoload/vim_dadbod_completion.vim	/^let s:cache = {}$/;"	v
s:cache_all_columns	autoload/vim_dadbod_completion.vim	/^function! s:cache_all_columns(db, result) abort$/;"	f
s:cache_table_columns	autoload/vim_dadbod_completion.vim	/^function! s:cache_table_columns(db, table_scope, result)$/;"	f
s:complete	autoload/vim_dadbod_completion/compe.vim	/^function! s:complete(args) abort$/;"	f
s:count_columns_and_cache	autoload/vim_dadbod_completion.vim	/^function! s:count_columns_and_cache(db, count) abort$/;"	f
s:count_parser	autoload/vim_dadbod_completion/schemas.vim	/^function! s:count_parser(index, result) abort$/;"	f
s:count_query	autoload/vim_dadbod_completion/schemas.vim	/^let s:count_query = 'select count(*) as total from information_schema.columns'$/;"	v
s:determine	autoload/vim_dadbod_completion/compe.vim	/^function! s:determine(context) abort$/;"	f
s:documentation	autoload/vim_dadbod_completion/compe.vim	/^function! s:documentation(args) abort$/;"	f
s:filetypes	autoload/vim_dadbod_completion.vim	/^let s:filetypes = ['sql', 'mysql', 'plsql']$/;"	v
s:filter_rgx	autoload/vim_dadbod_completion.vim	/^let s:filter_rgx = printf('^\\(%s\\)\\?', s:quotes.open)$/;"	v
s:findstart_rgx	autoload/vim_dadbod_completion.vim	/^let s:findstart_rgx = printf('\\(^\\|\\s\\+\\|\\.\\|(\\|%s\\)\\@<=\\w\\+\\(%s\\)\\?$', s:quotes./;"	v
s:generate_query	autoload/vim_dadbod_completion.vim	/^function! s:generate_query(db, query_key, ...) abort$/;"	f
s:get_buffer_db_info	autoload/vim_dadbod_completion.vim	/^function! s:get_buffer_db_info(bufnr) abort$/;"	f
s:get_metadata	autoload/vim_dadbod_completion/compe.vim	/^function! s:get_metadata(...) abort$/;"	f
s:get_scope	autoload/vim_dadbod_completion.vim	/^function! s:get_scope(buffer, table_scope, type) abort$/;"	f
s:get_table_scope_columns	autoload/vim_dadbod_completion.vim	/^function! s:get_table_scope_columns(db, table_scope) abort$/;"	f
s:map_and_filter	autoload/vim_dadbod_completion/schemas.vim	/^function! s:map_and_filter(delimiter, list) abort$/;"	f
s:map_columns_by_table	autoload/vim_dadbod_completion.vim	/^function! s:map_columns_by_table(db, index, column) abort$/;"	f
s:map_item	autoload/vim_dadbod_completion.vim	/^function! s:map_item(type, info_val, kind, index, item) abort$/;"	f
s:mark	autoload/vim_dadbod_completion.vim	/^let s:mark = get(g:, 'vim_dadbod_completion_mark', '[DB]')$/;"	v
s:nvim_job_cb	autoload/vim_dadbod_completion/job.vim	/^function! s:nvim_job_cb(jobid, data, event) dict abort$/;"	f
s:oracle	autoload/vim_dadbod_completion/schemas.vim	/^let s:oracle = {$/;"	v
s:oracle_args	autoload/vim_dadbod_completion/schemas.vim	/^let s:oracle_args = "echo \\"SET linesize 4000;\\nSET pagesize 4000;\\n%s\\" | "$/;"	v
s:oracle_base_column_query	autoload/vim_dadbod_completion/schemas.vim	/^let s:oracle_base_column_query = printf(s:oracle_args, "COLUMN column_name FORMAT a50;\\nCOLUMN /;"	v
s:parse_functions	autoload/vim_dadbod_completion.vim	/^function! s:parse_functions(db, functions) abort$/;"	f
s:parse_schemas	autoload/vim_dadbod_completion.vim	/^function! s:parse_schemas(db, schemas) abort$/;"	f
s:postgres	autoload/vim_dadbod_completion/schemas.vim	/^let s:postgres = {$/;"	v
s:query	autoload/vim_dadbod_completion/schemas.vim	/^let s:query = s:base_column_query.' order by column_name asc'$/;"	v
s:quote	autoload/vim_dadbod_completion.vim	/^function! s:quote(val) abort$/;"	f
s:quote_rules	autoload/vim_dadbod_completion/schemas.vim	/^let s:quote_rules = {$/;"	v
s:quotes	autoload/vim_dadbod_completion.vim	/^let s:quotes = vim_dadbod_completion#schemas#get_quotes_rgx()$/;"	v
s:quotes	autoload/vim_dadbod_completion/alias_parser.vim	/^let s:quotes = vim_dadbod_completion#schemas#get_quotes_rgx()$/;"	v
s:quotes	autoload/vim_dadbod_completion/compe.vim	/^let s:quotes = vim_dadbod_completion#schemas#get_quotes_rgx()$/;"	v
s:reserved_words	autoload/vim_dadbod_completion/alias_parser.vim	/^let s:reserved_words = ['inner', 'outer', 'left', 'right', 'join', 'where', 'on', 'from', 'as']$/;"	v
s:reserved_words	autoload/vim_dadbod_completion/reserved_keywords.vim	/^let s:reserved_words = [$/;"	v
s:reserved_words	autoload/vim_dadbod_completion/schemas.vim	/^let s:reserved_words = vim_dadbod_completion#reserved_keywords#get_as_dict()$/;"	v
s:save_to_cache	autoload/vim_dadbod_completion.vim	/^function! s:save_to_cache(bufnr, db, table, dbui) abort$/;"	f
s:schema_query	autoload/vim_dadbod_completion/schemas.vim	/^let s:schema_query = 'select table_schema,table_name from information_schema.columns group by ta/;"	v
s:schemas	autoload/vim_dadbod_completion/schemas.vim	/^let s:schemas = {$/;"	v
s:should_quote	autoload/vim_dadbod_completion/schemas.vim	/^function! s:should_quote(rules, val) abort$/;"	f
s:table_column_query	autoload/vim_dadbod_completion/schemas.vim	/^let s:table_column_query = s:base_column_query.' where table_name={db_tbl_name}'$/;"	v
s:table_scope_rgx	autoload/vim_dadbod_completion.vim	/^let s:table_scope_rgx = printf('\\(%s\\)\\?\\(\\w\\+\\)\\(%s\\)\\?\\.\\(%s\\)\\?\\w*\\(%s\\)\\?$/;"	v
s:trigger_rgx	autoload/vim_dadbod_completion.vim	/^let s:trigger_rgx = printf('\\(%s\\|\\.\\)$', s:quotes.open)$/;"	v
s:trigger_rgx	autoload/vim_dadbod_completion/compe.vim	/^let s:trigger_rgx = printf('\\(%s\\|\\.\\)$', s:quotes.open)$/;"	v
s:vim_job	autoload/vim_dadbod_completion/job.vim	/^let s:vim_job = {'output': '', 'exit': 0, 'close': 0 }$/;"	v
s:vim_job.call_cb_if_finished	autoload/vim_dadbod_completion/job.vim	/^function! s:vim_job.call_cb_if_finished() abort$/;"	f
s:vim_job.cb	autoload/vim_dadbod_completion/job.vim	/^function! s:vim_job.cb(job, data) dict abort$/;"	f
s:vim_job.close_cb	autoload/vim_dadbod_completion/job.vim	/^function! s:vim_job.close_cb(channel) dict abort$/;"	f
scripts	package.json	/^  "scripts": {},$/;"	o
source	src/index.js	/^  const source = {$/;"	c
type	package.json	/^            "type": "string"$/;"	s	object:contributes.configuration.properties.coc.source.db.filetypes.items
type	package.json	/^          "type": "array",$/;"	s	object:contributes.configuration.properties.coc.source.db.triggerCharacters
type	package.json	/^          "type": "boolean",$/;"	s	object:contributes.configuration.properties.coc.source.db.enable
type	package.json	/^          "type": "integer",$/;"	s	object:contributes.configuration.properties.coc.source.db.priority
type	package.json	/^          "type": "string",$/;"	s	object:contributes.configuration.properties.coc.source.db.shortcut
type	package.json	/^          "type": ["array"],$/;"	a	object:contributes.configuration.properties.coc.source.db.filetypes
type	package.json	/^      "type": "object",$/;"	s	object:contributes.configuration
type	package.json	/^    "type": "git",$/;"	s	object:repository
url	package.json	/^    "url": "git+https:\/\/github.com\/kristijanhusak\/vim-dadbod-completion.git"$/;"	s	object:repository
url	package.json	/^    "url": "https:\/\/github.com\/kristijanhusak\/vim-dadbod-completion\/issues"$/;"	s	object:bugs
validFiletypes	src/index.js	/^const validFiletypes = ['sql', 'mysql', 'plsql']$/;"	C
version	package.json	/^  "version": "0.0.44",$/;"	s
vim-dadbod-completion	README.md	/^# vim-dadbod-completion$/;"	c
vim_dadbod_completion	plugin/vim_dadbod_completion.vim	/^augroup vim_dadbod_completion$/;"	a
vim_dadbod_completion#alias_parser#parse	autoload/vim_dadbod_completion/alias_parser.vim	/^function! vim_dadbod_completion#alias_parser#parse(bufnr, tables) abort$/;"	f
vim_dadbod_completion#compe#create	autoload/vim_dadbod_completion/compe.vim	/^function! vim_dadbod_completion#compe#create() abort$/;"	f
vim_dadbod_completion#fetch	autoload/vim_dadbod_completion.vim	/^function! vim_dadbod_completion#fetch(bufnr) abort$/;"	f
vim_dadbod_completion#job#run	autoload/vim_dadbod_completion/job.vim	/^function! vim_dadbod_completion#job#run(cmd, callback) abort$/;"	f
vim_dadbod_completion#omni	autoload/vim_dadbod_completion.vim	/^function! vim_dadbod_completion#omni(findstart, base)$/;"	f
vim_dadbod_completion#refresh_deoplete	autoload/vim_dadbod_completion.vim	/^function! vim_dadbod_completion#refresh_deoplete() abort$/;"	f
vim_dadbod_completion#reserved_keywords#get	autoload/vim_dadbod_completion/reserved_keywords.vim	/^function! vim_dadbod_completion#reserved_keywords#get() abort$/;"	f
vim_dadbod_completion#reserved_keywords#get_as_dict	autoload/vim_dadbod_completion/reserved_keywords.vim	/^function! vim_dadbod_completion#reserved_keywords#get_as_dict() abort$/;"	f
vim_dadbod_completion#schemas#get	autoload/vim_dadbod_completion/schemas.vim	/^function! vim_dadbod_completion#schemas#get(scheme)$/;"	f
vim_dadbod_completion#schemas#get_quotes_rgx	autoload/vim_dadbod_completion/schemas.vim	/^function! vim_dadbod_completion#schemas#get_quotes_rgx() abort$/;"	f
vim_dadbod_completion#utils#msg	autoload/vim_dadbod_completion/utils.vim	/^function! vim_dadbod_completion#utils#msg(msg) abort$/;"	f
